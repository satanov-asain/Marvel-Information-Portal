{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","utils/setContent.js","components/errorMessage/ErrorMessage.gif","components/errorMessage/ErrorMessage.js","components/skeleton/Skeleton.js"],"names":["getContent","setContent","View","data","dispatch","useDispatch","randomCharLoadingStatus","useSelector","state","char","name","description","thumbnail","id","thumbnailName","homepage","wiki","payload","status","imgStyle","test","className","src","style","alt","to","onClick","charSetSingle","RandomChar","randomCharData","useState","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","fetchRandomChar","mjolnir","CharList","charList","setCharList","newItemsLoading","setNewItemsLoading","offset","setOffset","charEnded","setCharEnded","useGetAllCharactersQuery","currentData","characterList","isError","isLoading","isFetching","isItemsLoading","isStatus","onRequest","store","apiChar","util","resetApiState","console","log","onCharListLoaded","newCharList","ended","length","concat","itemRefs","useRef","focusOnItem","itemId","fetchCharInfo","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","elem","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","charLoadingStatus","comics","comicId","resourceURI","split","splice","fetchComicInfo","CharInfo","charData","updateCharInfo","CharSearchForm","searchCharLoadingStatus","searchCharData","loadingStatus","setLoadingStatus","useLayoutEffect","results","Object","keys","initialValues","charName","validationSchema","Yup","required","onSubmit","fetchSearchChar","htmlFor","type","placeholder","ErrorBoundary","error","info","this","setState","ErrorMessage","props","children","Component","MainPage","Error","img","objectFit","display","width","height","margin","Skeleton"],"mappings":"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","file":"static/js/5.88e098c4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage.js';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchRandomChar, fetchSearchChar, charSetSingle } from '../../redux/slices/charSlice';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst getContent = setContent('single');\n\nconst RandomChar=()=>{\n    const dispatch = useDispatch();\n    const {randomCharData, randomCharLoadingStatus} = useSelector(state => state.char);\n\n    const [char,setChar]=useState({});\n    \n    useEffect(()=>{\n        updateChar();\n        const timerId = setInterval(updateChar(), 60000);\n        return () => {\n            clearInterval(timerId)\n        }\n    },[]);\n\n    useEffect(() => {\n        onCharLoaded(randomCharData);\n    }, [randomCharData])\n\n   \n    const updateChar=()=>{\n        const id=Math.floor(Math.random()*(1011400-1011000)+1011000);\n        dispatch(fetchRandomChar(id));\n        onCharLoaded(randomCharData);\n    }\n    \n    const onCharLoaded=(char)=>{\n        setChar(char);\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {getContent(randomCharLoadingStatus, View, char)}\n\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Случайный персонаж на сегодня!<br/>\n                    Хочешь разузнать о нём по-лучше?\n                </p>\n                <p className=\"randomchar__title\">\n                    Или выбери кого-нибудь ещё\n                </p>\n                <button className=\"button button__main\"\n                        onClick={updateChar}>\n                    <div className=\"inner\">попробуй это</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n    \n}\n\nconst View = ({data})=>{\n    const dispatch = useDispatch()\n    const {randomCharLoadingStatus} = useSelector(state => state.char)\n    const {name,description,thumbnail,thumbnailName,homepage,wiki, id}=data;\n    const payload = {data, id, status: randomCharLoadingStatus\n    }\n    let imgStyle=/image_not_available/.test(thumbnail)?\n        {'objectFit':'unset'}:{'objectFit':'cover'};\n   \n    return(\n    <div className=\"randomchar__block\">\n        <img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\"/>\n        <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">\n                {description}\n                \n            </p>\n            <div className=\"randomchar__btns\">\n                <Link to={`/characters/${id}`} className=\"button button__main\">\n                                <div className=\"inner\"\n                                    onClick={() => {dispatch(charSetSingle(payload))}}>На страницу</div>\n                </Link>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default RandomChar;","import {useState,useEffect, useRef, useMemo} from 'react';\nimport store from '../../redux/store'\nimport { apiChar } from '../../redux/api/apiChar';\nimport { useDispatch } from 'react-redux/es/exports';\nimport { fetchCharInfo} from '../../redux/slices/charSlice';\nimport { useGetAllCharactersQuery } from '../../redux/api/apiChar';\n\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport setContent  from '../../utils/setContent';\nimport './charList.scss';\n\nconst getContent = setContent('list');\n\nconst CharList=()=> {\n    const dispatch = useDispatch();\n\n    const [charList,setCharList]=useState([]);\n    const [newItemsLoading,setNewItemsLoading]=useState(false);\n    const [offset,setOffset]=useState(210);\n    const [charEnded,setCharEnded]=useState(false);\n\n    const {\n        currentData: characterList = [],\n        isError,\n        isLoading,\n        isFetching\n    } = useGetAllCharactersQuery(offset);\n\n    let isItemsLoading = isLoading || isFetching;\n    let isStatus = isLoading?'loading':isFetching?'loading':isError?'error':'confirmed';\n\n    useEffect(()=>{\n        if(isStatus === 'confirmed'){\n            onRequest();\n        }\n        return () => {\n            setCharList([]);\n            setOffset(210);\n            store.dispatch(apiChar.util.resetApiState());\n        }\n    },[]);\n    useEffect(() => {\n        if(isStatus === 'confirmed'){\n            onRequest();}\n    }, [isStatus])\n\n    const onRequest=()=>{\n        console.log('JUST Request');\n        setNewItemsLoading(isStatus);\n        onCharListLoaded(characterList);\n    }\n\n    const onCharListLoaded=(newCharList)=>{\n        let ended = false;\n        if(newCharList.length%9!=0){ended=true;}\n        setCharList(charList=>charList.concat(characterList));\n        setNewItemsLoading(isStatus);\n        setCharEnded(ended);  \n    }\n\n    const itemRefs = useRef([]);\n   \n    const focusOnItem = (id, itemId) => {\n        dispatch(fetchCharInfo(itemId));\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderItems=(arr)=> {\n        const items =  arr.map((item,i) => {\n            let imgStyle=/image_not_available/.test(item.thumbnail)?\n            {'objectFit':'unset'}:{'objectFit':'cover'};\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames='char__item'>\n                    <li \n                        className=\"char__item\"\n                        key={item.id}\n                        tabIndex={0}\n                        ref={elem=>itemRefs.current[i]=elem}\n                        onClick={()=>{focusOnItem(i, item.id)}}\n                        onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") { focusOnItem(i, item.id); }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n        let elements=useMemo(()=>{\n            return charList?getContent(isStatus, ()=>renderItems(charList), newItemsLoading):null;\n        },[isStatus, charList, offset, characterList]);\n        \n        return (\n            <div className=\"char__list\">\n                {elements}    \n                <button className=\"button button__main button__long\"\n                        disabled={isItemsLoading}\n                        style={{'display': charEnded?'none':'block'}}\n                        onClick={()=>setOffset(offset => offset+9)}>\n                    <div className=\"inner\">Подзагрузить</div>\n                </button>\n            </div>\n        )       \n}\n\nexport default CharList;\n\n","import { useState, useEffect, } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport setContent from '../../utils/setContent';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { charSetSingle } from '../../redux/slices/charSlice';\nimport { fetchComicInfo } from '../../redux/slices/comicSlice';\n\nimport './charInfo.scss';\n\nconst getContent = setContent('single');\n\nconst CharInfo = () => {\n\n    const {charData, charLoadingStatus} = useSelector(state => state.char);\n\n    const [char,setChar]=useState(null);\n\n    useEffect(()=>{\n        updateCharInfo();\n    },[]);\n\n    useEffect(()=>{\n            updateCharInfo();\n    },[charData])\n\n    const updateCharInfo=()=>{\n        if(!charData){return;}  \n        onCharLoaded(charData);      \n    }\n\n    const onCharLoaded=(char)=>{\n        setChar(char);\n    }\n    \n    return (\n        <div className=\"char__info\">\n            {getContent(charLoadingStatus, View, char)}\n        </div>\n    )\n}\n\nconst View =({data})=>{\n\n    const dispatch = useDispatch();\n    const {charLoadingStatus} = useSelector(state => state.char);\n    const {name,description,thumbnail,homepage,wiki,comics,id}=data;\n\n    const payload = {data, id, status: charLoadingStatus}\n    let imgStyle=/image_not_available'/.test(thumbnail)?\n        {'objectFit':'contain'}:{'objectFit':'cover'};\n    return(\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} style={imgStyle} alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                    <Link to={`/characters/${id}`} className=\"button button__main\">\n                                <div className=\"inner\"\n                                    onClick={() => {dispatch(charSetSingle(payload))}}>На страницу</div>\n                    </Link>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Комиксы:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length>0?null:\"К сожалению комиксы по данному персонажу отсутсвуют\"}\n                {\n                    comics.map((item,i)=>{\n                        if(i>9) return;\n                        let comicId = item.resourceURI.split('/').splice(-1);\n                        return(\n                        <li className=\"char__comics-item\" key ={i}>\n                            <Link to={`/comics/${id}`} className=\"\">\n                                <div className=\"inner\"\n                                    onClick={() => {dispatch(fetchComicInfo(comicId))}}>{item.name}</div>\n                            </Link>\n                        </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes={\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState, useEffect, useLayoutEffect} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchSearchChar, charSetSingle} from '../../redux/slices/charSlice';\r\n\r\nimport './charSearchForm.scss';\r\n\r\n\r\nconst CharSearchForm = () => {\r\n    const dispatch = useDispatch();\r\n    const {searchCharLoadingStatus, searchCharData} = useSelector(state => state.char);\r\n\r\n    const [char, setChar] = useState({});\r\n    const [loadingStatus, setLoadingStatus] = useState('idle');\r\n\r\n    useEffect(() => {\r\n        setChar({});\r\n        setLoadingStatus('idle');\r\n\r\n    },[])\r\n    useLayoutEffect(() => {\r\n        setChar(searchCharData);\r\n        setLoadingStatus(searchCharLoadingStatus);\r\n        return () => {\r\n            setChar({});\r\n            setLoadingStatus('idle');\r\n        }\r\n    },[searchCharData, searchCharLoadingStatus])\r\n\r\n    const updateChar = (name) => {\r\n        dispatch(fetchSearchChar(name));\r\n    }\r\n    const payload = {\r\n        data: searchCharData,\r\n        id: searchCharData.id,\r\n        status: searchCharLoadingStatus\r\n    }\r\n\r\n    const results = Object.keys(char).length===0 ? null : (Object.keys(char).length!==0 && loadingStatus !== 'error')?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">Найден! Посетить страницу {char.name}?</div>\r\n                        <Link to={`/characters/${char.id}`} className=\"button button__secondary\">\r\n                                <div className=\"inner\"\r\n                                    onClick={() => {dispatch(charSetSingle(payload))}}>На страницу</div>\r\n                        </Link>\r\n                    </div> \r\n                    :<div className=\"char__search-error\">\r\n                        Персонаж не найден или запрос не выполнен. Перепроверьте имя и попробуйте вновь\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('Это поле обязательно')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Или найдите персонажа по имени:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"\r\n                            />\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loadingStatus==='loading'}>\r\n                            <div className=\"inner\">найти</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state={\r\n        error:false\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        console.log(error, info);\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render(){\r\n        if(this.state.error){\r\n           return<ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nconst MainPage=()=>{  \r\n    return(\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n                <div className=\"char__content\">\r\n                    <ErrorBoundary>\r\n                        <CharList/>\r\n                    </ErrorBoundary>\r\n                    <div>\r\n                        <ErrorBoundary>\r\n                            <CharInfo />\r\n                        </ErrorBoundary>\r\n                        <ErrorBoundary>\r\n                            <CharSearchForm/>\r\n                        </ErrorBoundary>\r\n                    </div>\r\n                </div>        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n\r\n\r\n","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton.js';\r\n\r\nconst setContent=(type)=>{\r\n\r\n    switch(type){\r\n        case 'single':\r\n            return(\r\n                (status, Component, data) => {\r\n                    switch(status){\r\n                        case 'idle':{\r\n                            return (!data\r\n                            ?<Skeleton/>\r\n                            :<Component data={data}/>)\r\n                        }\r\n                            break;\r\n                        case 'loading':\r\n                            return <Spinner/>\r\n                            break;\r\n                        case 'error':\r\n                            return <ErrorMessage/>\r\n                        default:\r\n                            throw new Error('Unexpected process state');\r\n                    }\r\n                }\r\n                \r\n            );\r\n            \r\n        case 'list':\r\n            return(\r\n                (status, Component, newItemsLoading) => {\r\n                    switch(status){\r\n                        case 'loading': \r\n                            return newItemsLoading? <Component/>:<Spinner/>;\r\n                        case 'confirmed':\r\n                            return <Component/>\r\n                        case 'error':\r\n                            return <ErrorMessage/>\r\n                        default:\r\n                            throw new Error('Unexpected process state');\r\n                    }\r\n                }\r\n            );\r\n            \r\n            case 'page':\r\n                return(\r\n                    (status, Component, data) => {\r\n                        switch(status){\r\n                            case 'idle':{\r\n                                return (!data\r\n                                ?<Skeleton/>\r\n                                :<Component data={data}/>)\r\n                            }\r\n                                break;\r\n                            case 'loading':\r\n                                return <Spinner/>\r\n                                break;\r\n                            case 'error':\r\n                                return <ErrorMessage/>\r\n                            default:\r\n                                throw new Error('Unexpected process state');\r\n                        }\r\n                    }\r\n                    \r\n                );\r\n                \r\n            default:\r\n                throw new Error('Unexpected process state');\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default setContent;\r\n\r\n// const setContent=(status, Component, data)=>{\r\n//     switch(status){\r\n//         case 'idle':{\r\n//             return (!data\r\n//             ?<Skeleton/>\r\n//             :<Component data={data}/>)\r\n//         }\r\n//             break;\r\n//         case 'loading':\r\n//             return <Spinner/>\r\n//             break;\r\n//         case 'error':\r\n//             return <ErrorMessage/>\r\n//         default:\r\n//             throw new Error('Unexpected process state');\r\n//     }\r\n// }\r\n\r\n// switch(process){\r\n//     case 'waiting':\r\n//         return <Skeleton/>;\r\n//         break;\r\n//     case 'loading':\r\n//         return <Spinner/>\r\n//         break;\r\n//     case 'confirmed':\r\n//         return <Component data={data}/>\r\n//         break;\r\n//     case 'error':\r\n//         return <ErrorMessage/>\r\n//     default:\r\n//         throw new Error('Unexpected process state');\r\n// }","export default __webpack_public_path__ + \"static/media/ErrorMessage.42292aa1.gif\";","import img from './ErrorMessage.gif';\r\n\r\nconst ErrorMessage=()=>{\r\n    return(\r\n        <img src={img } alt='Error' style={{objectFit:'contain',display:'block', width:'250px',height:'250px', margin:'0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Пожалуйста выбери героя слева для просмотра информации</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;"],"sourceRoot":""}