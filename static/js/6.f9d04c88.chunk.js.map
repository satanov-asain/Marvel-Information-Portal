{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","utils/setContent.js","components/errorMessage/ErrorMessage.gif","components/errorMessage/ErrorMessage.js","components/skeleton/Skeleton.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["getContent","setContent","ComicsList","dispatch","useDispatch","useState","comicsList","setComicsList","offset","setOffset","comicsEnded","setComicsEnded","useGetAllComicsQuery","data","comicsListQuery","isLoading","isFetching","isError","isItemsLoading","isStatus","useEffect","onRequest","store","apiComic","util","resetApiState","onComicsListLoaded","newComicsList","ended","length","concat","className","arr","items","map","item","i","CSSTransition","timeout","classNames","onClick","fetchComicInfo","id","onKeyPress","e","key","to","src","thumbnail","alt","title","price","TransitionGroup","component","renderItems","disabled","style","ComicsPage","AppBanner","type","status","Component","Error","newItemsLoading","ErrorMessage","img","objectFit","display","width","height","margin","Skeleton","avengers","avengersLogo"],"mappings":"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","file":"static/js/6.f9d04c88.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\nimport store from '../../redux/store';\nimport { apiComic } from '../../redux/api/apiComic';\nimport { useDispatch } from 'react-redux';\nimport { fetchComicInfo } from '../../redux/slices/comicSlice';\nimport { useGetAllComicsQuery } from '../../redux/api/apiComic';\nimport { Link } from 'react-router-dom';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport setContent from '../../utils/setContent';\nimport './comicsList.scss';\n\nconst getContent = setContent('list');\n\nconst ComicsList = () => {\n    const dispatch = useDispatch();\n\n    const [comicsList, setComicsList] = useState([]);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {\n        data: comicsListQuery = [],\n        isLoading,\n        isFetching,\n        isError\n    } = useGetAllComicsQuery(offset);\n    let isItemsLoading = isLoading || isFetching;\n    let isStatus = isLoading?'loading':isFetching?'loading':isError?'error':'confirmed';\n    \n    useEffect(() => {\n        if(isStatus === 'confirmed'){\n            onRequest();\n        }\n        return () => {\n            setComicsList([]);\n            setOffset(0);\n            store.dispatch(apiComic.util.resetApiState())\n        }\n    }, [])\n    useEffect(() => {\n        if(isStatus === 'confirmed'){\n            onRequest();\n        }\n    },[isStatus])\n\n    const onRequest = () => {\n        onComicsListLoaded(comicsListQuery);\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length % 8 !== 0) {\n            ended = true;\n        }\n        setComicsList(comicsList =>comicsList.concat(newComicsList));\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <CSSTransition key={i} timeout={500} classNames=''>\n                    <li className=\"comics__item\" key={i}\n                        onClick={() => {dispatch(fetchComicInfo(item.id))}}\n                        onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            dispatch(fetchComicInfo(item.id))\n                            }\n                        }} >\n                        <Link to={`/comics/${item.id}`}>\n                            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.price}</div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n            )\n        })\n        return (\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                    {items} \n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n\n    return (\n        <div className=\"comics__list\">\n            {getContent(isStatus, ()=>renderItems(comicsList), isItemsLoading)}\n            <button \n                disabled={isItemsLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => {setOffset(offset=>offset+8)}}>\n                <div className=\"inner\">Подзагрузить</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;  ","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage=()=>{\r\n    return(\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\nexport default ComicsPage;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton.js';\r\n\r\nconst setContent=(type)=>{\r\n\r\n    switch(type){\r\n        case 'single':\r\n            return(\r\n                (status, Component, data) => {\r\n                    switch(status){\r\n                        case 'idle':{\r\n                            return (!data\r\n                            ?<Skeleton/>\r\n                            :<Component data={data}/>)\r\n                        }\r\n                            break;\r\n                        case 'loading':\r\n                            return <Spinner/>\r\n                            break;\r\n                        case 'error':\r\n                            return <ErrorMessage/>\r\n                        default:\r\n                            throw new Error('Unexpected process state');\r\n                    }\r\n                }\r\n                \r\n            );\r\n            \r\n        case 'list':\r\n            return(\r\n                (status, Component, newItemsLoading) => {\r\n                    switch(status){\r\n                        case 'loading': \r\n                            return newItemsLoading? <Component/>:<Spinner/>;\r\n                        case 'confirmed':\r\n                            return <Component/>\r\n                        case 'error':\r\n                            return <ErrorMessage/>\r\n                        default:\r\n                            throw new Error('Unexpected process state');\r\n                    }\r\n                }\r\n            );\r\n            \r\n            case 'page':\r\n                return(\r\n                    (status, Component, data) => {\r\n                        switch(status){\r\n                            case 'idle':{\r\n                                return (!data\r\n                                ?<Skeleton/>\r\n                                :<Component data={data}/>)\r\n                            }\r\n                                break;\r\n                            case 'loading':\r\n                                return <Spinner/>\r\n                                break;\r\n                            case 'error':\r\n                                return <ErrorMessage/>\r\n                            default:\r\n                                throw new Error('Unexpected process state');\r\n                        }\r\n                    }\r\n                    \r\n                );\r\n                \r\n            default:\r\n                throw new Error('Unexpected process state');\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default setContent;\r\n\r\n// const setContent=(status, Component, data)=>{\r\n//     switch(status){\r\n//         case 'idle':{\r\n//             return (!data\r\n//             ?<Skeleton/>\r\n//             :<Component data={data}/>)\r\n//         }\r\n//             break;\r\n//         case 'loading':\r\n//             return <Spinner/>\r\n//             break;\r\n//         case 'error':\r\n//             return <ErrorMessage/>\r\n//         default:\r\n//             throw new Error('Unexpected process state');\r\n//     }\r\n// }\r\n\r\n// switch(process){\r\n//     case 'waiting':\r\n//         return <Skeleton/>;\r\n//         break;\r\n//     case 'loading':\r\n//         return <Spinner/>\r\n//         break;\r\n//     case 'confirmed':\r\n//         return <Component data={data}/>\r\n//         break;\r\n//     case 'error':\r\n//         return <ErrorMessage/>\r\n//     default:\r\n//         throw new Error('Unexpected process state');\r\n// }","export default __webpack_public_path__ + \"static/media/ErrorMessage.42292aa1.gif\";","import img from './ErrorMessage.gif';\r\n\r\nconst ErrorMessage=()=>{\r\n    return(\r\n        <img src={img } alt='Error' style={{objectFit:'contain',display:'block', width:'250px',height:'250px', margin:'0 auto'}}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Пожалуйста выбери героя слева для просмотра информации</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                Новые комиксы каждую неделю!<br/>\n                Следите за обновлениями!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}